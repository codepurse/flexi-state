{"version":3,"file":"index.umd.js","sources":["../src/files/index.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport const createStore = (initializeStore) => {\r\n  let state = initializeStore(null);\r\n  let listeners = [];\r\n\r\n  const getState = () => state;\r\n\r\n  const setState = (newState) => {\r\n    if (shallowEqual(state, newState)) return; // Check for shallow equality before updating state\r\n    state = newState; // Update state directly\r\n    listeners.forEach((listener) => listener(state));\r\n  };\r\n\r\n  const subscribe = (listener) => {\r\n    listeners.push(listener);\r\n    return () => {\r\n      listeners = listeners.filter((l) => l !== listener);\r\n    };\r\n  };\r\n\r\n  const actions = {};\r\n  for (const [key, action] of Object.entries(initializeStore(state))) {\r\n    if (typeof action === \"function\") {\r\n      actions[key] = (...args) => {\r\n        console.log(\"Action:\", key);\r\n        const updater = action(...args); // Get the updater function\r\n        const newState = updater(state); // Call the updater function with the current state\r\n        setState(newState);\r\n      };\r\n    }\r\n  }\r\n\r\n  return (selector = getState) => {\r\n    const [currentState, setCurrentState] = useState(selector(getState()));\r\n\r\n    useEffect(() => {\r\n      const unsubscribe = subscribe((newState) => {\r\n        const selectedState = selector(newState);\r\n        if (!shallowEqual(currentState, selectedState)) {\r\n          // Update state only if it has changed\r\n          setCurrentState(selectedState);\r\n        }\r\n      });\r\n      return unsubscribe;\r\n    }, [selector]);\r\n\r\n    return { ...currentState, ...actions }; // Return both state and actions\r\n  };\r\n};\r\n\r\nconst shallowEqual = (objA, objB) => {\r\n  if (objA === objB) return true;\r\n\r\n  if (\r\n    typeof objA !== \"object\" ||\r\n    objA === null ||\r\n    typeof objB !== \"object\" ||\r\n    objB === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  const keysA = Object.keys(objA);\r\n  const keysB = Object.keys(objB);\r\n\r\n  if (keysA.length !== keysB.length) return false;\r\n\r\n  for (let key of keysA) {\r\n    if (!objB.hasOwnProperty(key) || objA[key] !== objB[key]) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n"],"names":["createStore","shallowEqual","objA","objB","keysA","Object","keys","keysB","length","_i2","_keysA","key","hasOwnProperty","initializeStore","state","listeners","getState","actions","_loop","_Object$entries$_i","_Object$entries","_i","action","newState","console","log","apply","slice","call","arguments","updater","forEach","listener","entries","selector","_useState","useState","currentState","setCurrentState","useEffect","push","selectedState","filter","l","_extends"],"mappings":"0eAEaA,IAiDPC,EAAe,SAACC,EAAMC,GAC1B,GAAID,IAASC,EAAM,OAAO,EAE1B,GACkB,iBAATD,GACE,OAATA,GACgB,iBAATC,GACE,OAATA,EAEA,OACF,EAEA,IAAMC,EAAQC,OAAOC,KAAKJ,GACpBK,EAAQF,OAAOC,KAAKH,GAE1B,GAAIC,EAAMI,SAAWD,EAAMC,OAAQ,OAAO,EAE1C,IAAAC,IAAAA,EAAAC,EAAAA,EAAgBN,EAAKK,EAAAC,EAAAF,OAAAC,IAAE,CAAlB,IAAIE,EAAGD,EAAAD,GACV,IAAKN,EAAKS,eAAeD,IAAQT,EAAKS,KAASR,EAAKQ,GAAM,OAC5D,CAAA,CAEA,OAAO,CACT,gBAvE2B,SAACE,GAoB1B,IAnBA,IAAIC,EAAQD,EAAgB,MACxBE,EAAY,GAEVC,EAAW,WAAM,OAAAF,CAAK,EAetBG,EAAU,CAAE,EAACC,EAAAA,WACd,IAAAC,EAAAC,EAAAC,GAAOV,EAAGQ,EAAEG,GAAAA,EAAMH,EAAA,GACC,mBAAXG,IACTL,EAAQN,GAAO,WAhBF,IAACY,EAiBZC,QAAQC,IAAI,UAAWd,GAjBXY,EAkBID,EAAMI,WAAAC,EAAAA,GAAAA,MAAAC,KAAAC,WACLC,CAAQhB,GAlBzBb,EAAaa,EAAOS,KACxBT,EAAQS,EACRR,EAAUgB,QAAQ,SAACC,GAAQ,OAAKA,EAASlB,EAAM,GAkB7C,EAEJ,EATAO,EAAAD,EAAAA,EAA4Bf,OAAO4B,QAAQpB,EAAgBC,IAAOO,EAAAD,EAAAZ,OAAAa,IAAAH,IAWlE,gBAAQgB,QAAAA,IAAAA,IAAAA,EAAWlB,GACjB,IAAAmB,EAAwCC,EAAAA,SAASF,EAASlB,MAAnDqB,EAAYF,EAAEG,GAAAA,EAAeH,EAAA,GAapC,OAXAI,EAAAA,UAAU,WACR,IAvBeP,EA8Bf,OA7BFjB,EAAUyB,KADOR,EAuBe,SAACT,GAC7B,IAAMkB,EAAgBP,EAASX,GAC1BtB,EAAaoC,EAAcI,IAE9BH,EAAgBG,EAEpB,GA3BK,WACL1B,EAAYA,EAAU2B,OAAO,SAACC,GAAM,OAAAA,IAAMX,CAAQ,EACpD,CA2BA,EAAG,CAACE,IAEJU,EAAA,CAAA,EAAYP,EAAiBpB,EAC/B,CACF"}