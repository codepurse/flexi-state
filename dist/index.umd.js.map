{"version":3,"file":"index.umd.js","sources":["../src/util/utils.js","../src/createStore.js"],"sourcesContent":["export const shallowEqual = (objA, objB) => {\r\n  if (objA === objB) return true;\r\n  if (\r\n    typeof objA !== \"object\" ||\r\n    objA === null ||\r\n    typeof objB !== \"object\" ||\r\n    objB === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  for (const key in objA) {\r\n    if (objA.hasOwnProperty(key)) {\r\n      if (!objB.hasOwnProperty(key) || objA[key] !== objB[key]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const key in objB) {\r\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const deepMerge = (target, source) => {\r\n  const result = { ...target };\r\n  for (const key in source) {\r\n    if (typeof source[key] === \"object\" && source[key] !== null) {\r\n      result[key] = deepMerge(target[key] || {}, source[key]);\r\n    } else {\r\n      result[key] = source[key];\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","import { useEffect, useReducer, useRef } from \"react\";\r\nimport { deepMerge, shallowEqual } from \"./util/utils\";\r\n\r\nexport const createStore = (\r\n  initializeStore,\r\n  middlewares = [],\r\n  options = {}\r\n) => {\r\n  let state = initializeStore({});\r\n  let listeners = new Set();\r\n  let stateInitializer = initializeStore;\r\n  const { onPreStateChange, onPostStateChange } = options;\r\n\r\n  const getState = () => {\r\n    if (state === undefined) {\r\n      state = stateInitializer(null);\r\n      stateInitializer = null;\r\n    }\r\n    return state;\r\n  };\r\n\r\n  const setState = (newState) => {\r\n    const updatedState = deepMerge(state, newState);\r\n    if (shallowEqual(state, updatedState)) return;\r\n\r\n    // Call the onPreStateChange hook and get the updated state\r\n    let preUpdatedState = updatedState;\r\n    if (typeof onPreStateChange === \"function\") {\r\n      preUpdatedState = onPreStateChange(state, updatedState) || updatedState;\r\n    }\r\n\r\n    state = preUpdatedState;\r\n    listeners.forEach((listener) => listener(state));\r\n\r\n    // Call the onPostStateChange hook and get the updated state\r\n    let postUpdatedState = state;\r\n    if (typeof onPostStateChange === \"function\") {\r\n      postUpdatedState = onPostStateChange(state) || state;\r\n    }\r\n\r\n    // Call the onStateChange hook\r\n    if (typeof options.onStateChange === \"function\") {\r\n      options.onStateChange(state, postUpdatedState);\r\n    }\r\n\r\n    if (!shallowEqual(state, postUpdatedState)) {\r\n      state = postUpdatedState;\r\n      listeners.forEach((listener) => listener(state));\r\n    }\r\n  };\r\n  let actions = {};\r\n  for (const [key, action] of Object.entries(initializeStore(state))) {\r\n    if (typeof action === \"function\") {\r\n      actions[key] = (...args) => {\r\n        const updater = action(...args);\r\n        const newState = updater(state);\r\n        setState(newState);\r\n      };\r\n    }\r\n  }\r\n  const useStore = (selector = (state) => state) => {\r\n    const stateRef = useRef(selector(state));\r\n    const [_, forceUpdate] = useReducer((x) => x + 1, 0);\r\n\r\n    useEffect(() => {\r\n      const listener = (newState) => {\r\n        const selectedState = selector(newState);\r\n        if (!shallowEqual(stateRef.current, selectedState)) {\r\n          stateRef.current = selectedState;\r\n          forceUpdate();\r\n        }\r\n      };\r\n      const unsubscribe = subscribe(listener);\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [selector]);\r\n\r\n    if (!selector || selector.toString() === ((state) => state).toString()) {\r\n      return { ...stateRef.current, ...actions };\r\n    }\r\n\r\n    return {\r\n      ...stateRef.current,\r\n      ...Object.fromEntries(\r\n        Object.entries(actions).filter(([key]) => key in stateRef.current)\r\n      ),\r\n    };\r\n  };\r\n\r\n  const subscribe = (listener) => {\r\n    listeners.add(listener);\r\n    return () => {\r\n      listeners.delete(listener);\r\n    };\r\n  };\r\n\r\n  // Apply middlewares\r\n  middlewares.forEach((middleware) => {\r\n    const middlewareResult = middleware({\r\n      getState,\r\n      setState,\r\n      subscribe,\r\n      state,\r\n      actions,\r\n    });\r\n    if (middlewareResult) {\r\n      const { state: dynamicState = {}, actions: dynamicActions = {} } =\r\n        middlewareResult;\r\n      state = { ...state, ...dynamicState };\r\n      actions = { ...actions, ...dynamicActions };\r\n    }\r\n  });\r\n\r\n  return useStore;\r\n};\r\n"],"names":["shallowEqual","objA","objB","key","hasOwnProperty","deepMerge","target","source","result","_extends","initializeStore","middlewares","options","state","listeners","Set","stateInitializer","onPreStateChange","onPostStateChange","getState","undefined","setState","newState","updatedState","preUpdatedState","forEach","listener","postUpdatedState","onStateChange","actions","_loop","_Object$entries$_i","_Object$entries","_i","action","apply","slice","call","arguments","updater","Object","entries","length","subscribe","add","middleware","middlewareResult","_middlewareResult$sta","_middlewareResult$act","dynamicActions","selector","stateRef","useRef","forceUpdate","useReducer","x","useEffect","unsubscribe","selectedState","current","toString","fromEntries","filter","_ref"],"mappings":"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"}