{"version":3,"file":"index.esm.js","sources":["../src/middleware/broadcast.js","../src/middleware/hydrateState.js","../src/middleware/logging.js","../src/middleware/preserve.js","../src/util/utils.js","../src/createStore.js"],"sourcesContent":["export const broadcast = (broadcastKey) => {\r\n  let broadcastChannel = null;\r\n\r\n  return (store) => {\r\n    const handleBroadcastMessage = (event) => {\r\n      const { type, payload } = event.data;\r\n      if (type === \"STATE_UPDATE\" && payload && typeof payload === \"object\") {\r\n        store.setState(payload);\r\n      }\r\n    };\r\n\r\n    const initializeBroadcastChannel = () => {\r\n      broadcastChannel = new BroadcastChannel(broadcastKey);\r\n      broadcastChannel.onmessage = handleBroadcastMessage;\r\n    };\r\n\r\n    const sendStateUpdate = (state) => {\r\n      // Omit any functions from the state before broadcasting\r\n      const stateToSend = Object.fromEntries(\r\n        Object.entries(state).filter(([, value]) => typeof value !== \"function\")\r\n      );\r\n\r\n      if (broadcastChannel) {\r\n        broadcastChannel.postMessage({\r\n          type: \"STATE_UPDATE\",\r\n          payload: stateToSend,\r\n        });\r\n      }\r\n    };\r\n\r\n    // Initialize broadcast channel\r\n    initializeBroadcastChannel();\r\n\r\n    // Subscribe to state changes and broadcast updates\r\n    const unsubscribe = store.subscribe((state) => {\r\n      sendStateUpdate(state);\r\n    });\r\n\r\n    // Return unsubscribe function to clean up on unmount\r\n    return () => {\r\n      if (broadcastChannel) {\r\n        broadcastChannel.close();\r\n      }\r\n      unsubscribe();\r\n    };\r\n  };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const HydrateState = ({ children }) => {\r\n  const [isHydrated, setIsHydrated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(true);\r\n  }, []);\r\n\r\n  return <>{isHydrated ? <div>{children}</div> : null}</>;\r\n};\r\n","export const logging = () => {\r\n  return (store) => {\r\n    let prevState = store.getState(); // Initialize previous state\r\n\r\n    // Subscribe to state changes and log them\r\n    const unsubscribe = store.subscribe((newState) => {\r\n      console.log(\"Previous State:\", prevState);\r\n      console.log(\"New State:\", newState);\r\n    });\r\n\r\n    // Return unsubscribe function to clean up on unmount\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  };\r\n};\r\n","export const preserve = (storageType, storageName, stateKeys) => {\r\n  return (store) => {\r\n    const persistState = (state) => {\r\n      try {\r\n        if (typeof window !== \"undefined\" && window[storageType]) {\r\n          const persistedState = {};\r\n          stateKeys.forEach((key) => {\r\n            persistedState[key] = state[key];\r\n          });\r\n          const serializedState = JSON.stringify(persistedState);\r\n          window[storageType].setItem(storageName, serializedState);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while persisting state:\", error);\r\n      }\r\n    };\r\n\r\n    const loadState = () => {\r\n      try {\r\n        if (typeof window !== \"undefined\") {\r\n          const persistedState = window[storageType].getItem(storageName);\r\n          if (persistedState) {\r\n            return JSON.parse(persistedState);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while loading persisted state:\", error);\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    // Load persisted state on initialization\r\n    const initialState = loadState();\r\n    if (initialState) {\r\n      store.setState(initialState);\r\n    } else {\r\n      // Use the initial state from the initializeStore function\r\n      store.setState(store.getState());\r\n    }\r\n\r\n    // Subscribe to state changes and persist selected state slices\r\n\r\n    if (typeof window !== \"undefined\") {\r\n      try {\r\n        const unsubscribe = store.subscribe((state) => {\r\n          persistState(state);\r\n        });\r\n\r\n        // Return unsubscribe function to clean up on unmount\r\n        return unsubscribe;\r\n      } catch (error) {}\r\n    }\r\n  };\r\n};\r\n","export const shallowEqual = (objA, objB) => {\r\n  if (objA === objB) return true;\r\n  if (\r\n    typeof objA !== \"object\" ||\r\n    objA === null ||\r\n    typeof objB !== \"object\" ||\r\n    objB === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  for (const key in objA) {\r\n    if (objA.hasOwnProperty(key)) {\r\n      if (!objB.hasOwnProperty(key) || objA[key] !== objB[key]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const key in objB) {\r\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const deepMerge = (target, source) => {\r\n  const result = { ...target };\r\n  for (const key in source) {\r\n    if (typeof source[key] === \"object\" && source[key] !== null) {\r\n      result[key] = deepMerge(target[key] || {}, source[key]);\r\n    } else {\r\n      result[key] = source[key];\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","import { useEffect, useReducer, useRef } from \"react\";\r\nimport { deepMerge, shallowEqual } from \"./util/utils\";\r\n\r\nexport const createStore = (initializeStore, middlewares = []) => {\r\n  let state = initializeStore({});\r\n  let listeners = new Set();\r\n  let stateInitializer = initializeStore;\r\n\r\n  const getState = () => {\r\n    if (state === undefined) {\r\n      state = stateInitializer(null);\r\n      stateInitializer = null;\r\n    }\r\n    return state;\r\n  };\r\n\r\n  const setState = (newState) => {\r\n    const updatedState = deepMerge(state, newState);\r\n    if (shallowEqual(state, updatedState)) return;\r\n    state = updatedState;\r\n    listeners.forEach((listener) => listener(state));\r\n  };\r\n\r\n  const subscribe = (listener) => {\r\n    listeners.add(listener);\r\n    return () => {\r\n      listeners.delete(listener);\r\n    };\r\n  };\r\n\r\n  const actions = {};\r\n  for (const [key, action] of Object.entries(initializeStore(state))) {\r\n    if (typeof action === \"function\") {\r\n      actions[key] = (...args) => {\r\n        const updater = action(...args);\r\n        const newState = updater(state);\r\n        setState(newState);\r\n      };\r\n    }\r\n  }\r\n\r\n  const useStore = (selector = getState) => {\r\n    const stateRef = useRef(selector(state)); // Initialize with initial state\r\n    const [_, forceUpdate] = useReducer((x) => x + 1, 0);\r\n\r\n    useEffect(() => {\r\n      const listener = (newState) => {\r\n        const selectedState = selector(newState);\r\n        if (stateRef.current !== selectedState) {\r\n          stateRef.current = selectedState;\r\n          forceUpdate();\r\n        }\r\n      };\r\n\r\n      const unsubscribe = subscribe(listener);\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [selector]);\r\n\r\n    return {\r\n      ...stateRef.current,\r\n      ...actions,\r\n      getState,\r\n      setState,\r\n      subscribe,\r\n    };\r\n  };\r\n\r\n  // Apply middlewares\r\n  middlewares.forEach((middleware) =>\r\n    middleware({ getState, setState, subscribe })\r\n  );\r\n\r\n  return useStore;\r\n};\r\n"],"names":["broadcast","broadcastKey","broadcastChannel","store","BroadcastChannel","onmessage","event","_event$data","data","payload","type","setState","unsubscribe","subscribe","state","stateToSend","Object","fromEntries","entries","filter","_ref","postMessage","sendStateUpdate","close","HydrateState","children","_useState","useState","isHydrated","setIsHydrated","useEffect","_jsx","_Fragment","logging","prevState","getState","newState","console","log","preserve","storageType","storageName","stateKeys","initialState","window","persistedState","getItem","JSON","parse","error","loadState","forEach","key","serializedState","stringify","setItem","persistState","deepMerge","target","source","result","_extends","createStore","initializeStore","middlewares","listeners","Set","stateInitializer","undefined","updatedState","objA","objB","hasOwnProperty","shallowEqual","listener","add","actions","_loop","_Object$entries$_i","_Object$entries","_i","action","apply","slice","call","arguments","updater","length","middleware","selector","stateRef","useRef","forceUpdate","useReducer","x","selectedState","current"],"mappings":"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"}