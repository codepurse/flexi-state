{"version":3,"file":"index.esm.js","sources":["../src/util/utils.js","../src/createStore.js","../src/middleware/broadcast.js","../src/middleware/hydrateState.js","../src/middleware/logging.js","../src/middleware/preserve.js"],"sourcesContent":["export const shallowEqual = (objA, objB) => {\r\n  if (objA === objB) return true;\r\n  if (\r\n    typeof objA !== \"object\" ||\r\n    objA === null ||\r\n    typeof objB !== \"object\" ||\r\n    objB === null\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  for (const key in objA) {\r\n    if (objA.hasOwnProperty(key)) {\r\n      if (!objB.hasOwnProperty(key) || objA[key] !== objB[key]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const key in objB) {\r\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const deepMerge = (target, source) => {\r\n  const result = { ...target };\r\n  for (const key in source) {\r\n    if (typeof source[key] === \"object\" && source[key] !== null) {\r\n      result[key] = deepMerge(target[key] || {}, source[key]);\r\n    } else {\r\n      result[key] = source[key];\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","import { useEffect, useReducer, useRef } from \"react\";\r\nimport { deepMerge, shallowEqual } from \"./util/utils\";\r\n\r\nexport const createStore = (initializeStore, middlewares = []) => {\r\n  let state = initializeStore({});\r\n  let listeners = new Set();\r\n  let stateInitializer = initializeStore;\r\n\r\n  const getState = () => {\r\n    if (state === undefined) {\r\n      state = stateInitializer(null);\r\n      stateInitializer = null;\r\n    }\r\n    return state;\r\n  };\r\n\r\n  const setState = (newState) => {\r\n    const updatedState = deepMerge(state, newState);\r\n    if (shallowEqual(state, updatedState)) return;\r\n    state = updatedState;\r\n    listeners.forEach((listener) => listener(state));\r\n  };\r\n\r\n  const subscribe = (listener) => {\r\n    listeners.add(listener);\r\n    return () => {\r\n      listeners.delete(listener);\r\n    };\r\n  };\r\n\r\n  const actions = {};\r\n  for (const [key, action] of Object.entries(initializeStore(state))) {\r\n    if (typeof action === \"function\") {\r\n      actions[key] = (...args) => {\r\n        const updater = action(...args);\r\n        const newState = updater(state);\r\n        setState(newState);\r\n      };\r\n    }\r\n  }\r\n\r\n  const useStore = (selector = getState) => {\r\n    const stateRef = useRef(selector(state)); // Initialize with initial state\r\n    const [_, forceUpdate] = useReducer((x) => x + 1, 0);\r\n\r\n    useEffect(() => {\r\n      const listener = (newState) => {\r\n        const selectedState = selector(newState);\r\n        if (stateRef.current !== selectedState) {\r\n          stateRef.current = selectedState;\r\n          forceUpdate();\r\n        }\r\n      };\r\n\r\n      const unsubscribe = subscribe(listener);\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [selector]);\r\n\r\n    return {\r\n      ...stateRef.current,\r\n      ...actions,\r\n      getState,\r\n      setState,\r\n      subscribe,\r\n    };\r\n  };\r\n\r\n  // Apply middlewares\r\n  middlewares.forEach((middleware) =>\r\n    middleware({ getState, setState, subscribe })\r\n  );\r\n\r\n  return useStore;\r\n};\r\n","export const channelBroadcast = (broadcastKey) => {\r\n  let broadcastChannel = null;\r\n\r\n  return (store) => {\r\n    const handleBroadcastMessage = (event) => {\r\n      const { type, payload } = event.data;\r\n      if (type === \"STATE_UPDATE\" && payload && typeof payload === \"object\") {\r\n        store.setState(payload);\r\n      }\r\n    };\r\n\r\n    const initializeBroadcastChannel = () => {\r\n      broadcastChannel = new BroadcastChannel(broadcastKey);\r\n      broadcastChannel.onmessage = handleBroadcastMessage;\r\n    };\r\n\r\n    const sendStateUpdate = (state) => {\r\n      // Omit any functions from the state before broadcasting\r\n      const stateToSend = Object.fromEntries(\r\n        Object.entries(state).filter(([, value]) => typeof value !== \"function\")\r\n      );\r\n\r\n      if (broadcastChannel) {\r\n        broadcastChannel.postMessage({\r\n          type: \"STATE_UPDATE\",\r\n          payload: stateToSend,\r\n        });\r\n      }\r\n    };\r\n\r\n    // Initialize broadcast channel\r\n    initializeBroadcastChannel();\r\n\r\n    // Subscribe to state changes and broadcast updates\r\n    const unsubscribe = store.subscribe((state) => {\r\n      sendStateUpdate(state);\r\n    });\r\n\r\n    // Return unsubscribe function to clean up on unmount\r\n    return () => {\r\n      if (broadcastChannel) {\r\n        broadcastChannel.close();\r\n      }\r\n      unsubscribe();\r\n    };\r\n  };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const HydrateState = ({ children }) => {\r\n  const [isHydrated, setIsHydrated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(true);\r\n  }, []);\r\n\r\n  return <>{isHydrated ? <div>{children}</div> : null}</>;\r\n};\r\n","export const logging = () => {\r\n  return (store) => {\r\n    let prevState = store.getState(); // Initialize previous state\r\n\r\n    // Subscribe to state changes and log them\r\n    const unsubscribe = store.subscribe((newState) => {\r\n      console.log(\"Previous State:\", prevState);\r\n      console.log(\"New State:\", newState);\r\n    });\r\n\r\n    // Return unsubscribe function to clean up on unmount\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  };\r\n};\r\n","export const preserve = (storageType, storageName, stateKeys) => {\r\n  return (store) => {\r\n    const persistState = (state) => {\r\n      try {\r\n        if (typeof window !== \"undefined\" && window[storageType]) {\r\n          const persistedState = {};\r\n          stateKeys.forEach((key) => {\r\n            persistedState[key] = state[key];\r\n          });\r\n          const serializedState = JSON.stringify(persistedState);\r\n          window[storageType].setItem(storageName, serializedState);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while persisting state:\", error);\r\n      }\r\n    };\r\n\r\n    const loadState = () => {\r\n      try {\r\n        if (typeof window !== \"undefined\") {\r\n          const persistedState = window[storageType].getItem(storageName);\r\n          if (persistedState) {\r\n            return JSON.parse(persistedState);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while loading persisted state:\", error);\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    // Load persisted state on initialization\r\n    const initialState = loadState();\r\n    if (initialState) {\r\n      store.setState(initialState);\r\n    } else {\r\n      // Use the initial state from the initializeStore function\r\n      store.setState(store.getState());\r\n    }\r\n\r\n    // Subscribe to state changes and persist selected state slices\r\n\r\n    if (typeof window !== \"undefined\") {\r\n      try {\r\n        const unsubscribe = store.subscribe((state) => {\r\n          persistState(state);\r\n        });\r\n\r\n        // Return unsubscribe function to clean up on unmount\r\n        return unsubscribe;\r\n      } catch (error) {}\r\n    }\r\n  };\r\n};\r\n"],"names":["deepMerge","target","source","result","_extends","key","createStore","initializeStore","middlewares","state","listeners","Set","stateInitializer","getState","undefined","setState","newState","updatedState","objA","objB","hasOwnProperty","shallowEqual","forEach","listener","subscribe","add","actions","_loop","_Object$entries$_i","_Object$entries","_i","action","apply","slice","call","arguments","updater","Object","entries","length","middleware","selector","stateRef","useRef","forceUpdate","useReducer","x","useEffect","unsubscribe","selectedState","current","channelBroadcast","broadcastKey","broadcastChannel","store","BroadcastChannel","onmessage","event","_event$data","data","payload","type","stateToSend","fromEntries","filter","_ref","postMessage","sendStateUpdate","close","HydrateState","children","_useState","useState","isHydrated","setIsHydrated","_jsx","_Fragment","logging","prevState","console","log","preserve","storageType","storageName","stateKeys","initialState","window","persistedState","getItem","JSON","parse","error","loadState","serializedState","stringify","setItem","persistState"],"mappings":"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"}