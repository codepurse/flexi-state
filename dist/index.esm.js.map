{"version":3,"file":"index.esm.js","sources":["../src/middleware/broadcast.js","../src/middleware/hydrateState.js","../src/middleware/logging.js","../src/middleware/preserve.js"],"sourcesContent":["export const broadcast = (broadcastKey) => {\r\n  let broadcastChannel = null;\r\n\r\n  return (store) => {\r\n    const handleBroadcastMessage = (event) => {\r\n      const { type, payload } = event.data;\r\n      if (type === \"STATE_UPDATE\" && payload && typeof payload === \"object\") {\r\n        store.setState(payload);\r\n      }\r\n    };\r\n\r\n    const initializeBroadcastChannel = () => {\r\n      broadcastChannel = new BroadcastChannel(broadcastKey);\r\n      broadcastChannel.onmessage = handleBroadcastMessage;\r\n    };\r\n\r\n    const sendStateUpdate = (state) => {\r\n      // Omit any functions from the state before broadcasting\r\n      const stateToSend = Object.fromEntries(\r\n        Object.entries(state).filter(([, value]) => typeof value !== \"function\")\r\n      );\r\n\r\n      if (broadcastChannel) {\r\n        broadcastChannel.postMessage({\r\n          type: \"STATE_UPDATE\",\r\n          payload: stateToSend,\r\n        });\r\n      }\r\n    };\r\n\r\n    // Initialize broadcast channel\r\n    initializeBroadcastChannel();\r\n\r\n    // Subscribe to state changes and broadcast updates\r\n    const unsubscribe = store.subscribe((state) => {\r\n      sendStateUpdate(state);\r\n    });\r\n\r\n    // Return unsubscribe function to clean up on unmount\r\n    return () => {\r\n      if (broadcastChannel) {\r\n        broadcastChannel.close();\r\n      }\r\n      unsubscribe();\r\n    };\r\n  };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const HydrateState = ({ children }) => {\r\n  const [isHydrated, setIsHydrated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(true);\r\n  }, []);\r\n\r\n  return <>{isHydrated ? <div>{children}</div> : null}</>;\r\n};\r\n","export const logging = () => {\r\n  return (store) => {\r\n    let prevState = store.getState(); // Initialize previous state\r\n\r\n    // Subscribe to state changes and log them\r\n    const unsubscribe = store.subscribe((newState) => {\r\n      console.log(\"Previous State:\", prevState);\r\n      console.log(\"New State:\", newState);\r\n    });\r\n\r\n    // Return unsubscribe function to clean up on unmount\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  };\r\n};\r\n","export const preserve = (storageType, storageName, stateKeys) => {\r\n  return (store) => {\r\n    const persistState = (state) => {\r\n      try {\r\n        if (typeof window !== \"undefined\" && window[storageType]) {\r\n          const persistedState = {};\r\n          stateKeys.forEach((key) => {\r\n            persistedState[key] = state[key];\r\n          });\r\n          const serializedState = JSON.stringify(persistedState);\r\n          window[storageType].setItem(storageName, serializedState);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while persisting state:\", error);\r\n      }\r\n    };\r\n\r\n    const loadState = () => {\r\n      try {\r\n        if (typeof window !== \"undefined\") {\r\n          const persistedState = window[storageType].getItem(storageName);\r\n          if (persistedState) {\r\n            return JSON.parse(persistedState);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error while loading persisted state:\", error);\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    // Load persisted state on initialization\r\n    const initialState = loadState();\r\n    if (initialState) {\r\n      store.setState(initialState);\r\n    } else {\r\n      // Use the initial state from the initializeStore function\r\n      store.setState(store.getState());\r\n    }\r\n\r\n    // Subscribe to state changes and persist selected state slices\r\n\r\n    if (typeof window !== \"undefined\") {\r\n      try {\r\n        const unsubscribe = store.subscribe((state) => {\r\n          persistState(state);\r\n        });\r\n\r\n        // Return unsubscribe function to clean up on unmount\r\n        return unsubscribe;\r\n      } catch (error) {}\r\n    }\r\n  };\r\n};\r\n"],"names":["broadcast","broadcastKey","broadcastChannel","store","BroadcastChannel","onmessage","event","_event$data","data","payload","type","setState","unsubscribe","subscribe","state","stateToSend","Object","fromEntries","entries","filter","_ref","postMessage","sendStateUpdate","close","HydrateState","children","_useState","useState","isHydrated","setIsHydrated","useEffect","_jsx","_Fragment","logging","prevState","getState","newState","console","log","preserve","storageType","storageName","stateKeys","initialState","window","persistedState","getItem","JSON","parse","error","loadState","forEach","key","serializedState","stringify","setItem","persistState"],"mappings":"sGAAa,IAAAA,EAAY,SAACC,GACxB,IAAIC,EAAmB,KAEvB,OAAQC,SAAAA,IASJD,EAAmB,IAAIE,iBAAiBH,IACvBI,UATY,SAACC,GAC9B,IAAAC,EAA0BD,EAAME,KAAlBC,EAAOF,EAAPE,QACD,iBADDF,EAAJG,MACuBD,GAA8B,iBAAZA,GAC/CN,EAAMQ,SAASF,EAEnB,EAyBA,IAAMG,EAAcT,EAAMU,UAAU,SAACC,IAlBb,SAACA,GAEvB,IAAMC,EAAcC,OAAOC,YACzBD,OAAOE,QAAQJ,GAAOK,OAAO,SAAAC,GAAe,MAAiB,mBAAvBA,EAAM,EAA2B,IAGrElB,GACFA,EAAiBmB,YAAY,CAC3BX,KAAM,eACND,QAASM,GAGf,CAOEO,CAAgBR,EAClB,GAGA,OAAO,WACDZ,GACFA,EAAiBqB,QAEnBX,GACF,CACF,CACF,EC5CaY,EAAe,SAAHJ,GAAqB,IAAfK,EAAQL,EAARK,SAC7BC,EAAoCC,GAAS,GAAtCC,EAAUF,EAAA,GAAEG,EAAaH,KAMhC,OAJAI,EAAU,WACRD,GAAc,EAChB,EAAG,iBAEIE,EAAAC,EAAA,CAAAP,SAAGG,eAAaG,EAAA,MAAA,CAAAN,SAAMA,IAAkB,MACjD,ECVaQ,EAAU,WACrB,OAAO,SAAC9B,GACN,IAAI+B,EAAY/B,EAAMgC,WAGhBvB,EAAcT,EAAMU,UAAU,SAACuB,GACnCC,QAAQC,IAAI,kBAAmBJ,GAC/BG,QAAQC,IAAI,aAAcF,EAC5B,GAGA,OAAa,WACXxB,GACF,CACF,CACF,ECfa2B,EAAW,SAACC,EAAaC,EAAaC,GACjD,OAAO,SAACvC,GACN,IA8BMwC,EAfY,WAChB,IACE,GAAsB,oBAAXC,OAAwB,CACjC,IAAMC,EAAiBD,OAAOJ,GAAaM,QAAQL,GACnD,GAAII,EACF,OAAOE,KAAKC,MAAMH,EAEtB,CACF,CAAE,MAAOI,GACPZ,QAAQY,MAAM,uCAAwCA,EACxD,CAEF,CAGqBC,GAUrB,GARE/C,EAAMQ,SADJgC,GAIaxC,EAAMgC,YAKD,oBAAXS,OACT,IAME,OALoBzC,EAAMU,UAAU,SAACC,IA1CpB,SAACA,GACpB,IACE,GAAsB,oBAAX8B,QAA0BA,OAAOJ,GAAc,CACxD,IAAMK,EAAiB,CAAE,EACzBH,EAAUS,QAAQ,SAACC,GACjBP,EAAeO,GAAOtC,EAAMsC,EAC9B,GACA,IAAMC,EAAkBN,KAAKO,UAAUT,GACvCD,OAAOJ,GAAae,QAAQd,EAAaY,EAC3C,CACF,CAAE,MAAOJ,GACPZ,QAAQY,MAAM,gCAAiCA,EACjD,CACF,CA8BMO,CAAa1C,EACf,EAIF,CAAE,MAAOmC,GACX,CACF,CACF"}